package org.firebears;

import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder.PIDSourceParameter;
import edu.wpi.first.wpilibj.camera.AxisCamera;
import edu.wpi.first.wpilibj.can.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import com.sun.squawk.microedition.io.FileConnection;
import java.io.IOException;
import java.io.PrintStream;
import javax.microedition.io.Connector;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {

    //Practice robot
//    static final int CHASSIS_L_F = 63;
//    static final int CHASSIS_R_F = 63;
//    static final int CHASSIS_R_R = 20;
//    static final int CHASSIS_L_R = 11;
//    static final int SHOOT_FRONT = 9;//5
//    static final int SHOOT_REAR = 10;
//    static final int SHOOT_ELEVATOR = 18;
//    static final int TRIGGER = 13;
//    
    //Fake for 2012 cans
//    static final int CHASSIS_L_F = 1;
//    static final int CHASSIS_R_F = 2;//3
//    static final int CHASSIS_R_R = 3;
//    static final int CHASSIS_L_R = 4;
//    static final int LOAD_SPIN = 5;
//    static final int LOAD_RIGHT = 6;
//    static final int LOAD_LEFT = 7;
//    static final int SHOOT_FRONT = 8;//5
//    static final int SHOOT_REAR = 8;
//    static final int SHOOT_ELEVATOR = 8;
//    static final int TRIGGER = 8;
    
    
    //Competition Jags
    static final int CHASSIS_L_F = 16;
    static final int CHASSIS_R_F = 4;
    static final int CHASSIS_R_R = 11;
    static final int CHASSIS_L_R = 10;
    static final int SHOOT_FRONT = 18;
    static final int SHOOT_REAR = 3;  // TODO Fix rear shooter assignment
    static final int SHOOT_ELEVATOR = 12;
    static final int TRIGGER = 5;
    
    //PWM Loader Jags*****************
    static final int LOAD_SPIN = 1;
    static final int LOAD_RIGHT = 3;
    static final int LOAD_LEFT = 2;
//    
    //Competition Discretes
    static final int RT_ENC_1 = 1;
    static final int RT_ENC_2 = 2;
//    static final int LFT_ENC_1 = 3;
//    static final int LFT_ENC_2 = 4;
    static final int SHOOT_TIMER = 3;
    static final int TRIGGER_REST = 5;
    static final int SHOOT_FRIS_IN = 6;
    static final int LOADER_IN_TRAY = 7;
    static final int LOADER_R_CLAW_ENGAGED = 8;
    static final int LOADER_L_CLAW_ENGAGED = 11;
    static final int LL0 = 10;
    static final int LL1 = 9;
    static final int LL2 = 12;
    static final int LL3 = 13;
    static final int LL4 = 14;
    //Competition  Analogs
    static final int GYRO = 1;//TODO put gyro on test robot
    static final int SHOOT_ANGLE = 2;
    static final int LOAD_LEFT_ANGLE = 3;
    static final int LOAD_RIGHT_ANGLE = 4;
    
    public final static double PUSH_TIME = 0.14;
    public final static double PUSH_SPEED = -1;
    public final static double STOP = 0;
    //TODO Tune RETRACT_TIME to match spinup time
    public final static double RETRACT_TIME = 1;//Stops with jag limit switch, time includes shooter spinner recovery time
    public final static double RETRACT_SPEED = .5;
    
    
    public static final boolean DEBUG = true;
    public static final String CAMERA_IP_ADDR = "10.28.46.11";
    public static AxisCamera axisCamera = null;
    public static Counter shootSpeedTimer = new Counter(SHOOT_TIMER);
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static CANJaguar chassisFrontRightJag;
    public static CANJaguar chassisRearRightJag;
    public static CANJaguar chassisFrontLeftJag;
    public static CANJaguar chassisRearLeftJag;
    public static CANJaguar shooterWheelFrontJag;
    public static CANJaguar shooterWheelRearJag;
    public static CANJaguar triggerPushJag;
    public static CANJaguar shootElevatorJag;
    public static Jaguar loaderClimberRotatingFeederJag;
    public static Jaguar loaderClimberJagRight;
    public static Jaguar loaderClimberJagLeft;
    public static Encoder chassisLeftEncoder;
    public static Encoder chassisRightEncoder;
    public static DigitalInput loaderClimberFrisbeeInTray;
    public static DigitalInput loaderClimberClimbRightClawEngaged;
    public static DigitalInput loaderClimberClimbLeftClawEngaged;
    public static DigitalInput shooterfrisbeeInShooter;
    public static DigitalInput triggerRest;
    public static DigitalOutput lightsLine0;
    public static DigitalOutput lightsLine1;
    public static DigitalOutput lightsLine2;
    public static DigitalOutput lightsLine3;
    public static DigitalOutput lightsLine4;
    public static Gyro chassisGyro;
    public static AnalogChannel shootElevatorAngle;
    public static AnalogChannel loaderClimberLeftAngleCh;
    public static AnalogChannel loaderClimberRightAngleCh;
    public static RobotDrive chassisRobotDrive;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    static String logdata = "";

    /**
     * Print a message to the console and also save it into the logData
     * variable.
     */
    static void log(String msg) {
        System.out.println(msg);
        logdata += msg + "\n";
    }

    /**
     * Save the logData variable to a file on the cRIO.
     */
    static void saveLogs() {
        long time = System.currentTimeMillis();
        String filename = "/tmp/RobotMap_" + time + ".txt";
        try {
            FileConnection fc = (FileConnection) Connector.open("file:///"
                    + filename, Connector.WRITE);
            fc.create();
            PrintStream out = new PrintStream(fc.openOutputStream());
            out.println(logdata);
            fc.close();
        } catch (IOException iox) {
            iox.printStackTrace();
        }
    }

    /**
     * Try finding a CANJaguar, repeating up to five times.
     */
    static CANJaguar findJaguar(int id) throws CANTimeoutException {
        CANJaguar jag = null;
        CANTimeoutException caughtException = null;
        for (int i = 0; i < 5; i++) {
            try {
                jag = new CANJaguar(id);
                log("Found CANJaguar " + id);
                return jag;
            } catch (CANTimeoutException e) {
                log("FAILD TO FIND CANJaguar " + id + " " + e);
                caughtException = e;
            }
        }
        if (caughtException != null) {
            throw caughtException;
        }
        return jag;
    }

    public static void init() {


        try {
//            axisCamera = AxisCamera.getInstance(RobotMap.CAMERA_IP_ADDR);
//            axisCamera.writeWhiteBalance(AxisCamera.WhiteBalanceT.fixedFlour2);
//            axisCamera.writeResolution(AxisCamera.ResolutionT.k320x240);
        } catch (Exception e) {
            log("NO CAMERA");
            axisCamera = null;
        }


        // New robot jaguars : 4, 3, 2, 5
        // Old robot jaguars : 2, 4, 3, 1

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        try {
            chassisFrontRightJag = findJaguar(CHASSIS_R_F);//11
            log("FOUND***  " + CHASSIS_R_F + " CHASSIS_R_F");
        } catch (CANTimeoutException ex) {
            // ex.printStackTrace();
            log("NO JAG  " + CHASSIS_R_F + " CHASSIS_R_F");
        }


        try {
            chassisRearRightJag = findJaguar(CHASSIS_R_R);//13
            log("FOUND***  " + CHASSIS_R_R + " CHASSIS_R_R");
        } catch (CANTimeoutException ex) {
            //ex.printStackTrace();
            log("NO JAG  " + CHASSIS_R_R + " CHASSIS_R_R");
        }


        try {
            chassisFrontLeftJag = findJaguar(CHASSIS_L_F);
            log("FOUND***  " + CHASSIS_L_F + " CHASSIS_L_F");
        } catch (CANTimeoutException ex) {
            //ex.printStackTrace();
            log("NO JAG  " + CHASSIS_L_F + " CHASSIS_L_F");
        }


        try {
            chassisRearLeftJag = findJaguar(CHASSIS_L_R);
            log("FOUND***  " + CHASSIS_L_R + " CHASSIS_L_R");
        } catch (CANTimeoutException ex) {
            //ex.printStackTrace();
            log("NO JAG  " + CHASSIS_L_R + " CHASSIS_L_R");
        }

        try {
            shooterWheelFrontJag = new CANJaguar(SHOOT_FRONT);//3
            log("FOUND***  " + SHOOT_FRONT + " SHOOT_FRONT");
        } catch (CANTimeoutException ex) {
            //ex.printStackTrace();
            log("NO JAG  " + SHOOT_FRONT + " SHOOT_FRONT");
        }


        try {
            shooterWheelRearJag = new CANJaguar(SHOOT_REAR);//4
            log("FOUND***  " + SHOOT_REAR + " SHOT_REAR");
        } catch (CANTimeoutException ex) {
            //ex.printStackTrace();
            log("NO JAG  " + SHOOT_REAR + " SHOT_REAR");
        }

        try {
            triggerPushJag = new CANJaguar(TRIGGER);//5
            log("FOUND***  " + TRIGGER + " TRIGGER");
        } catch (CANTimeoutException ex) {
            //ex.printStackTrace();
            log("NO JAG  " + TRIGGER + " TRIGGER");
        }


        try {
            shootElevatorJag = new CANJaguar(SHOOT_ELEVATOR);//12
            log("FOUND***  " + SHOOT_ELEVATOR + " SHOOT_ELEVATOR");
        } catch (CANTimeoutException ex) {
            //ex.printStackTrace();
            log("NO JAG  " + SHOOT_ELEVATOR + " SHOOT_ELEVATOR");
        }

        //try {
        loaderClimberRotatingFeederJag = new Jaguar(LOAD_SPIN);//1
//            log("FOUND***  " +LOAD_SPIN + " LOAD_SPIN" );
//        } catch (CANTimeoutException ex) {
//            //ex.printStackTrace();
//            log("NO JAG  " +LOAD_SPIN + " LOAD_SPIN" );
//        }


        // try {
        loaderClimberJagRight = new Jaguar(LOAD_RIGHT);//2
//            log("FOUND***  " +LOAD_RIGHT + " LOAD_RIGHT" );
//        } catch (CANTimeoutException ex) {
//            //ex.printStackTrace();
//            log("NO JAG  " +LOAD_RIGHT + " LOAD_RIGHT" );
//        }


        //try {
        loaderClimberJagLeft = new Jaguar(LOAD_LEFT);//3
//            log("FOUND***  " +LOAD_LEFT + " LOAD_LEFT" );
//        } catch (CANTimeoutException ex) {
//            //ex.printStackTrace();
//            log("NO JAG  " +LOAD_LEFT + " LOAD_LEFT" );
//        }




        if (chassisFrontLeftJag != null) {
            chassisRobotDrive = new RobotDrive(chassisFrontLeftJag, chassisRearLeftJag, chassisFrontRightJag, chassisRearRightJag);
        } else {
            chassisRobotDrive = new RobotDrive(chassisRearLeftJag, chassisRearRightJag);
        }
//    chassisRobotDrive = new RobotDrive(chassisRearLeftJag,chassisRearRightJag);


        chassisRobotDrive.setSafetyEnabled(false);
        chassisRobotDrive.setExpiration(0.1);
        chassisRobotDrive.setSensitivity(0.5);
        chassisRobotDrive.setMaxOutput(1.0);
        chassisRobotDrive.setInvertedMotor(RobotDrive.MotorType.kFrontLeft, true);
        chassisRobotDrive.setInvertedMotor(RobotDrive.MotorType.kRearLeft, true);
        chassisRobotDrive.setInvertedMotor(RobotDrive.MotorType.kFrontRight, true);
        chassisRobotDrive.setInvertedMotor(RobotDrive.MotorType.kRearRight, true);
        chassisGyro = new Gyro(1, GYRO);//1
        LiveWindow.addSensor("Chassis", "gyro", chassisGyro);
        chassisGyro.setSensitivity(0.0070);
//        chassisLeftEncoder = new Encoder(1, LFT_ENC_1, 1, LFT_ENC_2, false, EncodingType.k1X);
//        LiveWindow.addSensor("Chassis", "leftEncoder", chassisLeftEncoder);
//        chassisLeftEncoder.setDistancePerPulse(0.072);
//        chassisLeftEncoder.setPIDSourceParameter(PIDSourceParameter.kDistance);
//        chassisLeftEncoder.start();
        chassisRightEncoder = new Encoder(1, RT_ENC_1, 1, RT_ENC_2, false, EncodingType.k1X);
        LiveWindow.addSensor("Chassis", "rightEncoder", chassisRightEncoder);
        chassisRightEncoder.setDistancePerPulse(0.065);
        chassisRightEncoder.setPIDSourceParameter(PIDSourceParameter.kDistance);
        chassisRightEncoder.start();
        lightsLine0 = new DigitalOutput(1, LL0);//10


        lightsLine1 = new DigitalOutput(1, LL1);//11


        lightsLine2 = new DigitalOutput(1, LL2);//12


        lightsLine3 = new DigitalOutput(1, LL3);//13
        //LiveWindow.addSensor("Lights", "line3", lightsLine3);

        lightsLine4 = new DigitalOutput(1, LL4);//14
        //LiveWindow.addSensor("Lights", "line4", lightsLine4);



        triggerRest = new DigitalInput(1, TRIGGER_REST);//5
//	LiveWindow.addSensor("Shooter", "counter", shooterSpeedTimer);

        shooterfrisbeeInShooter = new DigitalInput(1, SHOOT_FRIS_IN);//6
        LiveWindow.addSensor("Shooter", "frisbeeInShooter", shooterfrisbeeInShooter);



        shootElevatorAngle = new AnalogChannel(1, SHOOT_ANGLE);//2
        LiveWindow.addSensor("ShootElevator", "angleDetect1", shootElevatorAngle);



        loaderClimberLeftAngleCh = new AnalogChannel(1, LOAD_LEFT_ANGLE);//3
        LiveWindow.addSensor("LoaderClimber", "m_loaderAngleCh", loaderClimberLeftAngleCh);

        loaderClimberRightAngleCh = new AnalogChannel(1, LOAD_RIGHT_ANGLE);//4
        LiveWindow.addSensor("LoaderClimber", "m_loaderAngleCh", loaderClimberRightAngleCh);

        loaderClimberFrisbeeInTray = new DigitalInput(1, LOADER_IN_TRAY);//7
        LiveWindow.addSensor("LoaderClimber", "frisbeeInLoader", loaderClimberFrisbeeInTray);

        loaderClimberClimbRightClawEngaged = new DigitalInput(1, LOADER_R_CLAW_ENGAGED);//8
        LiveWindow.addSensor("LoaderClimber", "climbRightSensor", loaderClimberClimbRightClawEngaged);

        loaderClimberClimbLeftClawEngaged = new DigitalInput(1, LOADER_L_CLAW_ENGAGED);//9
        LiveWindow.addSensor("LoaderClimber", "climbLeftSensor", loaderClimberClimbLeftClawEngaged);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        saveLogs();
    }
}
