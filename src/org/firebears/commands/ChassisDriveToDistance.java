package org.firebears.commands;

import edu.wpi.first.wpilibj.command.PIDCommand;
import org.firebears.Robot;
import org.firebears.RobotMap;

/**
 * Drive the robot a specific number of inches forward,using a PID controller.
 */
public class ChassisDriveToDistance extends PIDCommand {

    double goalDistance = 36.0;

    public ChassisDriveToDistance(double distance) {
        this();
        goalDistance = distance;
    }

    public ChassisDriveToDistance() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
        super("ChassisDriveToDistance", 1.0, 0.01, 0.0, 0.02);
        getPIDController().setContinuous(false);
        getPIDController().setAbsoluteTolerance(0.5);
        getPIDController().setOutputRange(-0.6, 0.6);
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.chassis);
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }
    double encoderInput = 0;
    double chassisOutput = 0;

    protected double returnPIDInput() {
        encoderInput = -1 * RobotMap.chassisRightEncoder.getDistance();
        return RobotMap.chassisRightEncoder.getDistance() * -1;
    }

    protected void usePIDOutput(double output) {
        chassisOutput = output;
        Robot.chassis.arcadeDrive(output, 0.0);
    }

    protected void initialize() {
        RobotMap.chassisLeftEncoder.reset();
        RobotMap.chassisRightEncoder.reset();
        setSetpoint(-1 * goalDistance);
    }

    protected void execute() {
    }

    protected boolean isFinished() {
        return getPIDController().onTarget();
    }

    protected void end() {
        Robot.chassis.arcadeDrive(0.0, 0.0);
    }

    protected void interrupted() {
        end();
    }
}
