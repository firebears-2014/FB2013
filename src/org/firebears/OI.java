package org.firebears;

import org.firebears.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import org.firebears.subsystems.Lights;

/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // Another type of button you can create is a DigitalIOButton, which is
    // a button or switch hooked up to the cypress module. These are useful if
    // you want to build a customized operator interface.
    // Button button = new DigitalIOButton(1);
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton dsButton1;
    public JoystickButton dsButton6;
    public JoystickButton dsButtonScoop4;
    public JoystickButton dsButtonLoSp2;
    public JoystickButton dsButtonHiSp3;
    public JoystickButton dsButton7;
    public JoystickButton dsButtonDump5;
    public JoystickButton dsButtonHang8;
    public JoystickButton dsButtonHangElevate9;
    public JoystickButton dsButton10;
    public JoystickButton dsButton11;
    public Joystick DriverStick;
    public JoystickButton gsButtonShoot1;
    public JoystickButton gsButton2;
    public JoystickButton gsButtonAim3;
    public JoystickButton gsButton4;
    public JoystickButton gsButton5;
    public JoystickButton gsButton6;
    public JoystickButton gsButton7;
    public JoystickButton gsButton8;
    public JoystickButton gsButton9;
    public JoystickButton gsButton10;
    public JoystickButton gsButton11;
    public Joystick GunnerStick;
    
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    final int GS_TR_PUSH = 11;
    final int GS_TR_RETRACT = 10;
    final int GS_SHOOT_SETUP = 9;
    final int GS_FIRE_4 = 8;
    final int GS_ANGLE_P_BACK = 7;
    final int GS_ANGLE_P_FRONT = 6;
    final int GS_ANGLE_UP = 3;
    final int GS_ANGLE_DN = 2;
    final int GS_SHOOT = 1;
   
    
    final int DS_GT_ELEVATE = 9;
    final int DS_HANG = 8;
    final int DS_DUMP = 5;
    final int DS_SCOOP = 4;
    final int DS_DR_W_JSTICK = 3;
    final int DS_SLOW = 2;
    
    final double JOG_AMT_SHOOT_ANGLE  = .01;
    final double JOG_AMT_ELEV_ANGLE  = .04;

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        GunnerStick = new Joystick(2);

        gsButton11 = new JoystickButton(GunnerStick, GS_TR_PUSH);//11
        gsButton11.whenPressed(new TriggerPush());
        gsButton10 = new JoystickButton(GunnerStick, GS_TR_RETRACT);//10
        gsButton10.whenPressed(new TriggerRetract());
        gsButton9 = new JoystickButton(GunnerStick, GS_SHOOT_SETUP);//9
        gsButton9.whenPressed(new GroupAutoShootSetup(false));
        gsButton8 = new JoystickButton(GunnerStick, GS_FIRE_4);//8
        gsButton8.whenPressed(new GroupTriggerFire4());
        gsButton7 = new JoystickButton(GunnerStick, GS_ANGLE_P_BACK);//7 
        gsButton7.whenPressed(new ShootElevatorFixedAngle(240));  // TODO Tune button 7 for back of pyramid distance
        gsButton6 = new JoystickButton(GunnerStick, GS_ANGLE_P_FRONT);//6
        gsButton6.whenPressed(new ShootElevatorFixedAngle(140));// TODO Tune button 8 for front of pyramid distance
//        gsButton5 = new JoystickButton(GunnerStick, 5);
//        gsButton5.whenPressed(new Print());
//        gsButton4 = new JoystickButton(GunnerStick, 4);
//        gsButton4.whenPressed(new Print());
        gsButtonAim3 = new JoystickButton(GunnerStick, GS_ANGLE_UP);//3 Jog Shooter up
        gsButtonAim3.whenPressed(new ShootElevatorJogAngle(JOG_AMT_SHOOT_ANGLE));  
        gsButton2 = new JoystickButton(GunnerStick, GS_ANGLE_DN);// 2 Jog shooter down
        gsButton2.whenPressed(new ShootElevatorJogAngle(- JOG_AMT_SHOOT_ANGLE)); 
        gsButtonShoot1 = new JoystickButton(GunnerStick, GS_SHOOT);//1
        gsButtonShoot1.whileHeld(new TriggerContinousWhileHeld()); 
        
        //gsButtonShoot1.whenPressed(new GroupTriggerFire4());//TODO Fix spinner during shoot sequence

        DriverStick = new Joystick(1);

//        dsButton11 = new JoystickButton(DriverStick, 11);
//        dsButton11.whenPressed(new TriggerPush());
//        dsButton10 = new JoystickButton(DriverStick, DS_TR_RETRACT);
//        dsButton10.whenPressed(new TriggerRetract());
        dsButtonHangElevate9 = new JoystickButton(DriverStick, DS_GT_ELEVATE);//9 Go to Elevate angle/position
        dsButtonHangElevate9.whenPressed(new LoaderGoToPosition("Elevate"));
        dsButtonHang8 = new JoystickButton(DriverStick, DS_HANG);// 8 Go to Hang angle/position
        dsButtonHang8.whenPressed(new LoaderGoToPosition("Hang"));
        dsButton7 = new JoystickButton(DriverStick, 7);
        dsButton7.whenPressed(new LoaderJogAngle(JOG_AMT_ELEV_ANGLE));
        dsButton6 = new JoystickButton(DriverStick, 6);
        dsButton6.whenPressed(new LoaderJogAngle(- JOG_AMT_ELEV_ANGLE));
        dsButtonDump5 = new JoystickButton(DriverStick, DS_DUMP);// 5 Go to Dump angle/position
        dsButtonDump5.whenPressed(new LoaderGoToPosition("Dump"));
        dsButtonScoop4 = new JoystickButton(DriverStick, DS_SCOOP);//4 Go to Scoop angle/position
        dsButtonScoop4.whenPressed(new LoaderGoToPosition("Scoop"));
        dsButtonHiSp3 = new JoystickButton(DriverStick, DS_DR_W_JSTICK);// 3 Drive with Joystick  (return to high speed)
        dsButtonHiSp3.whenPressed(new ChassisDriveWithJoystick());
        dsButtonLoSp2 = new JoystickButton(DriverStick, DS_SLOW);//2 Slow mode*****
        dsButtonLoSp2.whenPressed(new ChassisSlowMode());
//        dsButton1 = new JoystickButton(DriverStick, 1);
//        dsButton1.whenPressed(new Print());

        // SmartDashboard Buttons
        SmartDashboard.putData("AutoShootSetup", new GroupAutoShootSetup());
        SmartDashboard.putData("ChassisTurnToTarget", new ChassisTurnToTarget());
        SmartDashboard.putData("ChassisResetGyro", new ChassisResetGyro());
        SmartDashboard.putData("CameraTakePicture", new CameraTakePicture());
        SmartDashboard.putData("ChassisDriveToDistance", new ChassisDriveToDistance());
        SmartDashboard.putData("ChassisTurnToAngle", new ChassisTurnToAngle());
//        SmartDashboard.putData("ChassisTurnRight", new ChassisTurnRight());
//        SmartDashboard.putData("ChassisTurnLeft", new ChassisTurnLeft());
        //SmartDashboard.putData("AutoP1", new AutoP1());
        SmartDashboard.putData("ChassisSlowMode", new ChassisSlowMode());
        //SmartDashboard.putData("AutoP2", new AutoP2());
        SmartDashboard.putData("Save Shoot DA Pref", new ShootElevatorSaveDAPref());
        SmartDashboard.putData("Clear Shoot DA Pref", new ShootElevatorClearDAPref());
        SmartDashboard.putData("Save Shoot Dist Angle", new GroupShootAngleCalebrate());
        //SmartDashboard.putData("AutoTotal", new GroupAutoTotal());
        SmartDashboard.putData("LightsOff", new LightsOff());
        SmartDashboard.putData("LightsShoot", new LightsShoot());
        SmartDashboard.putData("TriggerFire", new TriggerPush());
        SmartDashboard.putData("Save Retract Angle", new LoaderSavePosition("Retract"));
        SmartDashboard.putData("Save Scoop Angle", new LoaderSavePosition("Scoop"));
        SmartDashboard.putData("Save Dump Angle", new LoaderSavePosition("Dump"));
        SmartDashboard.putData("Save Hang  Angle", new LoaderSavePosition("Hang"));
        SmartDashboard.putData("Save Elevate Angle", new LoaderSavePosition("Elevate"));
        SmartDashboard.putData("Save Elevate preferences", new LoaderSavePreferences());
        SmartDashboard.putData("Trigger Reset Only:", new TriggerRetract(5));
        
        
        SmartDashboard.putData("LightsShooterWindup:", new LightActivation(Lights.SHOOTER_WINDUP));
        SmartDashboard.putData("LightsShoot:", new LightActivation(Lights.SHOOT));
        SmartDashboard.putData("LightsDumpingFrisbees:", new LightActivation(Lights.DUMPING_FRISBEES));
        SmartDashboard.putData("LightsLoaderOnGround:", new LightActivation(Lights.LOADER_ON_GROUND));
        SmartDashboard.putData("LightsMOVEING_FORWARD:", new LightActivation(Lights.MOVEING_FORWARD));
        SmartDashboard.putData("LightsMOVING_BACKWARD:", new LightActivation(Lights.MOVING_BACKWARD));
        SmartDashboard.putData("LightsFRISBEE_IN_BUCKET:", new LightActivation(Lights.FRISBEE_IN_BUCKET));
        SmartDashboard.putData("LightsNO_FRISBEE_IN_BUCKET:", new LightActivation(Lights.NO_FRISBEE_IN_BUCKET));
        SmartDashboard.putData("LightsTARGET_IN_SIGHT:", new LightActivation(Lights.TARGET_IN_SIGHT));
        SmartDashboard.putData("LightsTARGET_NOT_IN_SIGHT:", new LightActivation(Lights.TARGET_NOT_IN_SIGHT));
        SmartDashboard.putData("LightsAUTO_TARGETING:", new LightActivation(Lights.AUTO_TARGETING));
        SmartDashboard.putData("LightsCLIMBING:", new LightActivation(Lights.CLIMBING));
        SmartDashboard.putData("LightsNO_CLIMB_SWITCHES_CLOSED:", new LightActivation(Lights.NO_CLIMB_SWITCHES_CLOSED));
        SmartDashboard.putData("LightsLEFT_CLIMB_SWITCH_CLOSED:", new LightActivation(Lights.LEFT_CLIMB_SWITCH_CLOSED));
        SmartDashboard.putData("LightsRIGHT_CLIMB_SWITCH_CLOSED:", new LightActivation(Lights.RIGHT_CLIMB_SWITCH_CLOSED));
        SmartDashboard.putData("LightsAUTONOMOUS_STARTED:", new LightActivation(Lights.AUTONOMOUS_STARTED));
        SmartDashboard.putData("LightsTELEOP_STARTED:", new LightActivation(Lights.TELEOP_STARTED));
        SmartDashboard.putData("LightsEND_OF_MATCH:", new LightActivation(Lights.END_OF_MATCH));
        SmartDashboard.putData("LightsFRISBEE_IN_LOADER:", new LightActivation(Lights.FRISBEE_IN_LOADER));
        SmartDashboard.putData("LightsNO_FRISBEE_IN_LOADER:", new LightActivation(Lights.NO_FRISBEE_IN_LOADER));
//        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
//
        SmartDashboard.putData("Light0 true", new LightTest(RobotMap.lightsLine0, true));
        SmartDashboard.putData("Light0 false", new LightTest(RobotMap.lightsLine0, false));
        SmartDashboard.putData("Light1 true", new LightTest(RobotMap.lightsLine1, true));
        SmartDashboard.putData("Light1 false", new LightTest(RobotMap.lightsLine1, false));
        SmartDashboard.putData("Light2 true", new LightTest(RobotMap.lightsLine2, true));
        SmartDashboard.putData("Light2 false", new LightTest(RobotMap.lightsLine2, false));
        SmartDashboard.putData("Light3 true", new LightTest(RobotMap.lightsLine3, true));
        SmartDashboard.putData("Light3 false", new LightTest(RobotMap.lightsLine3, false));
        SmartDashboard.putData("Light4 true", new LightTest(RobotMap.lightsLine4, true));
        SmartDashboard.putData("Light4 false", new LightTest(RobotMap.lightsLine4, false));
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getstick1() {
        return DriverStick;
    }

    public Joystick getstick2() {
        return GunnerStick;
    }
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}
