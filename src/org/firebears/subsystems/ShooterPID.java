// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.firebears.subsystems;

import edu.wpi.first.wpilibj.CANJaguar;
import edu.wpi.first.wpilibj.Counter;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.can.CANTimeoutException;
import org.firebears.RobotMap;
import edu.wpi.first.wpilibj.command.PIDSubsystem;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 *
 */
public class ShooterPID extends PIDSubsystem {

    Counter SpeedTimer = RobotMap.shootSpeedTimer;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    CANJaguar spinnerFrontJag = RobotMap.shooterWheelFrontJag;
    CANJaguar spinnerRearJag = RobotMap.shooterWheelRearJag;
//    Encoder cHANGETHIS = RobotMap.shooterCHANGETHIS;

    DigitalInput frisbeeInShooter = RobotMap.shooterfrisbeeInShooter;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    // Initialize your subsystem here

    public ShooterPID() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
        super("Shooter", 1.0, 0.0, 0.0);
        setAbsoluteTolerance(0.2);
        getPIDController().setContinuous(false);
        LiveWindow.addActuator("Shooter", "PIDSubsystem Controller", getPIDController());
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
    }

    public void initDefaultCommand() {
    }
    double m_scaledProcessVar;

    protected double returnPIDInput() {
        double m_Period = SpeedTimer.getPeriod();
        if ((m_Period > .005) && (m_Period < .5) && (!Double.isNaN(m_Period))) {
            m_scaledProcessVar = 1.0 / m_Period;
        }
        return m_scaledProcessVar;
    }

    protected void usePIDOutput(double output) {
        try {
            spinnerFrontJag.setX(output);
            spinnerRearJag.setX(output);
        } catch (CANTimeoutException ex) {
            ex.printStackTrace();
        }
    }
}
