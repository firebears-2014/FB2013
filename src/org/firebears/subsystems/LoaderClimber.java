/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.firebears.subsystems;

import edu.wpi.first.wpilibj.AnalogChannel;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Jaguar;
import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.Preferences;
import edu.wpi.first.wpilibj.command.PIDSubsystem;
import org.firebears.RobotMap;

/**
 *
 * @author paul
 */
public class LoaderClimber extends PIDSubsystem {

    Jaguar rotatingFeederJag = RobotMap.loaderClimberRotatingFeederJag;
    //TODO Rotator feeder logic for loader
    Jaguar rightJag = RobotMap.loaderClimberJagRight;
    Jaguar leftJag = RobotMap.loaderClimberJagLeft;
    AnalogChannel leftAngleCh = RobotMap.loaderClimberLeftAngleCh;
    // AnalogChannel rightAngleCh = RobotMap.loaderClimberRightAngleCh;
    DigitalInput frisbeeInTray = RobotMap.loaderClimberFrisbeeInTray;
    DigitalInput rightClawEngaged = RobotMap.loaderClimberClimbRightClawEngaged;
    DigitalInput leftClawEngaged = RobotMap.loaderClimberClimbLeftClawEngaged;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
//    PIDController pidLeft;
//    PIDController pidRight;
    final public Preferences m_preferences;
    String m_sPosition;
    final double PID_TOL = 1.25; //// .05v/4V * 100
    private static final double Kp = 1;
    private static final double Ki = 0.01;
    private static final double Kd = 0.0;

    // Initialize your subsystem here
    public LoaderClimber() {
        super("LoaderClimberPID", Kp, Ki, Kd);

        m_preferences = Preferences.getInstance();
        //setSetpoint(m_preferences.getFloat("Retract", 2.4f));
        enable();
        setAbsoluteTolerance(0.05);
        setSetpoint(leftAngleCh.getAverageVoltage());
//        if(pidRight != null){
//            pidRight.setSetpoint(leftAngleCh.getAverageVoltage());
//        }if(pidRight != null){
//            pidRight.setSetpoint(leftAngleCh.getAverageVoltage());
//        }
        // setSetpoint() -  Sets where the PID controller should move the system
        //                  to
        // enable() - Enables the PID controller.
    }

    public void initDefaultCommand() {
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }

    protected double returnPIDInput() {
        // Return your input value for the PID loop
        // e.g. a sensor, like a potentiometer:
        // yourPot.getAverageVoltage() / kYourMaxVoltage;
        float volts = (float) leftAngleCh.getVoltage();
        return volts;
    }

    protected void usePIDOutput(double output) {
        rightJag.set(output);//TODO  Test motors, pluged in one at a time for correct direction
        leftJag.set(output * -1);
        // Use output to drive your system, like a motor
        // e.g. yourMotor.set(output);
        //TODO Need provision to avoid unspooling Loader sheave if wrong angle setpoint  Timeout??
    }
    
     public void jogAngle(double jogAmount) {
        double angleVolts;
        double testVolts = getSetpoint();
        angleVolts = getSetpoint() + jogAmount;
        
        System.out.println("Setpoint = " + testVolts + "  Jog = " + jogAmount + "New SP = " + angleVolts );
        setSetpoint(angleVolts);
    }

    public void savePreferences() {
        m_preferences.save();
        System.out.println("Preferences saved");
    }

    public void storeLoaderAngle(String sPosition) {
        float volts = (float) leftAngleCh.getVoltage();
        //float voltsR = (float) rightAngleCh.getVoltage();
        m_preferences.putFloat(sPosition, volts);
        //m_preferences.putFloat(sPosition + "R", voltsR);
        System.out.println(sPosition + " = " + volts);
    }

    public void goToPosition(String sPosition) {


        m_sPosition = sPosition;
        setSetpoint(m_preferences.getFloat(sPosition, 0));
//        pidRight.setSetpoint(m_preferences.getFloat(sPosition + "R", 0));



        System.out.println(sPosition + " Setpoint = " + m_preferences.getFloat(sPosition, 0));
    }

    // TODO implement a jog method for LoaderClimber
    public boolean anglegood() {
        return this.onTarget();
    }
}
