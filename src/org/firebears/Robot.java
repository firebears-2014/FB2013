package org.firebears;

import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.can.CANTimeoutException;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.firebears.commands.*;
import org.firebears.subsystems.*;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

    Command autonomousCommand;
    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static Chassis chassis;
    public static Camera camera;
    public static Lights lights;
    public static Shooter shooter;
    public static Trigger trigger;
    public static ShootElevator shootElevator;
    public static LoaderClimber loaderClimber;
    ;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    /** 
     * Whether the robot has gone through both autonomous and teleoperated modes. 
     * Used to determine final lighting.
     */
    public boolean fullMatch = false;

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
        RobotMap.init();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        chassis = new Chassis();
        camera = new Camera();
        lights = new Lights();
        shooter = new Shooter();
        trigger = new Trigger();
        shootElevator = new ShootElevator();
        loaderClimber = new LoaderClimber();
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        oi = new OI();

        autonomousCommand = new GroupAutonomousShootingShort();
//        autonomousCommand = new GroupAutoShooting();

        fullMatch = false;
    }

    private void setupAlliance() {
        DriverStation ds = DriverStation.getInstance();
        System.out.println();
        if (ds.getAlliance().equals(DriverStation.Alliance.kBlue)) {
            System.out.println("Welcome to the Blue Alliance");
            lights.lightProgram(Lights.SET_BLU_ALLIANCE);
        } else {
            System.out.println("Welcome to the Red Alliance");
            lights.lightProgram(Lights.SET_RED_ALLIANCE);
        }
    }

    public void disabledInit() {
        setupAlliance();
        if (fullMatch) {
            lights.lightProgram(Lights.END_OF_MATCH);
        }
    }

    public void autonomousInit() {
        if (autonomousCommand != null) {
            autonomousCommand.start();
        }
        setupAlliance();
        lights.lightProgram(Lights.AUTONOMOUS_STARTED);
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    public void teleopInit() {
        if (autonomousCommand != null) {
            autonomousCommand.cancel();
        }
        setupAlliance();
        lights.lightProgram(Lights.TELEOP_STARTED);
        fullMatch = true;
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        Scheduler.getInstance().run();

        try {
//            SmartDashboard.putNumber("Front Left:", RobotMap.chassisFrontLeftJag.getOutputCurrent());  
//            SmartDashboard.putNumber("Front Right:", RobotMap.chassisFrontRightJag.getOutputCurrent());
            SmartDashboard.putNumber("Rear Left:", RobotMap.chassisRearLeftJag.getOutputCurrent());
            SmartDashboard.putNumber("Rear Right:", RobotMap.chassisRearRightJag.getOutputCurrent());
            SmartDashboard.putNumber("Shoot Angle:", RobotMap.shootElevatorAngle.getAverageVoltage());
             SmartDashboard.putNumber("Loader angle voltage:", RobotMap.loaderClimberLeftAngleCh.getVoltage());
            
        } catch (CANTimeoutException ex) {
            ex.printStackTrace();
        }

//        try {
//            SmartDashboard.putNumber("Front Left:", RobotMap.chassisFrontLeftJag.getOutputCurrent());
//            SmartDashboard.putNumber("Front Right:", RobotMap.chassisFrontRightJag.getOutputCurrent());
//            SmartDashboard.putNumber("Rear Left:", RobotMap.chassisRearLeftJag.getOutputCurrent());
//            SmartDashboard.putNumber("Rear Right:", RobotMap.chassisRearRightJag.getOutputCurrent());
//        } catch (CANTimeoutException ex) {
//            ex.printStackTrace();
//        }
    }

    /**
     * This function called periodically during test mode
     */
    public void testPeriodic() {
        LiveWindow.run();
    }
}
